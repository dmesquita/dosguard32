name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    strategy:
      matrix:
        compiler: [gcc, clang]
    env:
      CC: ${{ matrix.compiler }}
      LSAN_OPTIONS: verbosity=1:log_threads=1
      WGET_PATH: http://download.savannah.nongnu.org/releases/lwip
      CONTRIB: contrib-2.1.0
      WGET_CHECK2JUNIT_PY: https://raw.githubusercontent.com/gsauthof/utility/42792030/check2junit.py
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install deps
      run: |
        sudo apt-get install check ninja-build doxygen
        wget --no-verbose ${WGET_PATH}/${CONTRIB}.zip
        unzip -oq ${CONTRIB}.zip
        patch -s -p0 < test/${CONTRIB}.patch
        python -m pip install lxml junit-xml
        wget --no-verbose ${WGET_CHECK2JUNIT_PY}

    - name: Build and Run unit tests with make
      run: |
        export LWIPDIR=../../../../src && cd ${CONTRIB}/ports/unix/check
        make -j 4 check
        make clean
        export EXTRA_CFLAGS="-DESP_LWIP=1" && export CC="${CC} $EXTRA_CFLAGS"
        make -j 4 check
        make clean
        export EXTRA_CFLAGS="-DESP_LWIP=1 -DIP_FORWARD=1" && export CC="${CC} $EXTRA_CFLAGS"
        make -j 4 check
        make clean
        export EXTRA_CFLAGS="-DESP_LWIP=1 -DIP_FORWARD=1 -DIP_NAPT=1 -DLWIP_ARCH_CC_H -include cc_esp_platform.h" && export CC="${CC} $EXTRA_CFLAGS"
        make -j 4 check      

    - name: Run cmake
      run: mkdir build && cd build && cmake .. -G Ninja
    - name: Build with cmake
      run: cd build && cmake --build .
    - name: Build docs with cmake
      run: cd build && cmake --build . --target lwipdocs

    - name: Validate combinations of options
      run: |
        cp ${CONTRIB}/examples/example_app/lwipcfg.h.example ${CONTRIB}/examples/example_app/lwipcfg.h
        cd ${CONTRIB}/ports/unix/example_app
        export CFLAGS="-DESP_LWIP=LWIP_NETCONN_FULLDUPLEX -DESP_LWIP_IP4_REASSEMBLY_TIMERS_ONDEMAND=ESP_LWIP -DESP_LWIP_IP6_REASSEMBLY_TIMERS_ONDEMAND=ESP_LWIP -DESP_LWIP_DNS_TIMERS_ONDEMAND=ESP_LWIP -DESP_LWIP_DHCP_FINE_TIMERS_ONDEMAND=ESP_LWIP -DESP_LWIP_IGMP_TIMERS_ONDEMAND=ESP_LWIP -DESP_LWIP_MLD6_TIMERS_ONDEMAND=ESP_LWIP -DESP_DNS=ESP_LWIP -DESP_LWIP_ARP=ESP_LWIP"
        export LWIPDIR=../../../../src/
        make TESTFLAGS="-Wno-documentation" -j 4
        chmod +x iteropts.sh && ./iteropts.sh

    - name: Build and run unit tests with cmake
      run: |
        export LWIP_DIR=`pwd`
        cd ${CONTRIB}/ports/unix/check
        mkdir build && cd build && cmake -DLWIP_DIR=`pwd`/../../../../.. .. -G Ninja
        cmake --build . && ./lwip_unittests
        python ${LWIP_DIR}/check2junit.py lwip_unittests.xml > ${LWIP_DIR}/unit_tests.xml

    - name: Build and run test apps
      run: |
        export LWIP_DIR=`pwd` && export LWIP_CONTRIB_DIR=`pwd`/${CONTRIB}
        cd test/apps
        # Prepare a failing report in case we get stuck (check in no-fork mode)
        python socket_linger_stress_test.py failed > ${LWIP_DIR}/socket_linger_stress_test.xml
        for cfg in config_no_linger config_linger config_linger_reuse; do
          cmake -DCI_BUILD=1 -DTEST_CONFIG=${cfg} -B ${cfg} -G Ninja .
          cmake --build ${cfg}/
          timeout 10 ./${cfg}/lwip_test_apps
          python ${LWIP_DIR}/check2junit.py lwip_test_apps.xml > ${LWIP_DIR}/${cfg}.xml
        done
        # Run the lingering test multiple times
        for run in {1..10000}; do ( timeout 10 ./config_linger/lwip_test_apps ) || exit 1 ; done
        # All good, regenerate the stress test-report, since the test succeeded
        python socket_linger_stress_test.py > ${LWIP_DIR}/socket_linger_stress_test.xml

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Test Results ${{ matrix.compiler }}
        path: "*.xml"

  publish-test-results:
    name: "Publish Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      checks: write
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: "artifacts/**/*.xml"
